// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"io"
	"sync"

	"github.com/dgdraganov/user-api/internal/core"
	"github.com/dgdraganov/user-api/internal/http/handler"
	"github.com/golang-jwt/jwt"
)

type CoreService struct {
	AuthenticateStub        func(context.Context, core.AuthMessage) (string, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		arg1 context.Context
		arg2 core.AuthMessage
	}
	authenticateReturns struct {
		result1 string
		result2 error
	}
	authenticateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListUsersStub        func(context.Context, int, int) ([]core.UserRecord, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	listUsersReturns struct {
		result1 []core.UserRecord
		result2 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 []core.UserRecord
		result2 error
	}
	SaveFileMetadataStub        func(context.Context, string, string, string) error
	saveFileMetadataMutex       sync.RWMutex
	saveFileMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	saveFileMetadataReturns struct {
		result1 error
	}
	saveFileMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	UploadUserFileStub        func(context.Context, string, io.Reader, int64) error
	uploadUserFileMutex       sync.RWMutex
	uploadUserFileArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 io.Reader
		arg4 int64
	}
	uploadUserFileReturns struct {
		result1 error
	}
	uploadUserFileReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateTokenStub        func(context.Context, string) (jwt.MapClaims, error)
	validateTokenMutex       sync.RWMutex
	validateTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	validateTokenReturns struct {
		result1 jwt.MapClaims
		result2 error
	}
	validateTokenReturnsOnCall map[int]struct {
		result1 jwt.MapClaims
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CoreService) Authenticate(arg1 context.Context, arg2 core.AuthMessage) (string, error) {
	fake.authenticateMutex.Lock()
	ret, specificReturn := fake.authenticateReturnsOnCall[len(fake.authenticateArgsForCall)]
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		arg1 context.Context
		arg2 core.AuthMessage
	}{arg1, arg2})
	stub := fake.AuthenticateStub
	fakeReturns := fake.authenticateReturns
	fake.recordInvocation("Authenticate", []interface{}{arg1, arg2})
	fake.authenticateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CoreService) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *CoreService) AuthenticateCalls(stub func(context.Context, core.AuthMessage) (string, error)) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = stub
}

func (fake *CoreService) AuthenticateArgsForCall(i int) (context.Context, core.AuthMessage) {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	argsForCall := fake.authenticateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CoreService) AuthenticateReturns(result1 string, result2 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CoreService) AuthenticateReturnsOnCall(i int, result1 string, result2 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	if fake.authenticateReturnsOnCall == nil {
		fake.authenticateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.authenticateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CoreService) ListUsers(arg1 context.Context, arg2 int, arg3 int) ([]core.UserRecord, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ListUsersStub
	fakeReturns := fake.listUsersReturns
	fake.recordInvocation("ListUsers", []interface{}{arg1, arg2, arg3})
	fake.listUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CoreService) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *CoreService) ListUsersCalls(stub func(context.Context, int, int) ([]core.UserRecord, error)) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *CoreService) ListUsersArgsForCall(i int) (context.Context, int, int) {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	argsForCall := fake.listUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CoreService) ListUsersReturns(result1 []core.UserRecord, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 []core.UserRecord
		result2 error
	}{result1, result2}
}

func (fake *CoreService) ListUsersReturnsOnCall(i int, result1 []core.UserRecord, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 []core.UserRecord
			result2 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 []core.UserRecord
		result2 error
	}{result1, result2}
}

func (fake *CoreService) SaveFileMetadata(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.saveFileMetadataMutex.Lock()
	ret, specificReturn := fake.saveFileMetadataReturnsOnCall[len(fake.saveFileMetadataArgsForCall)]
	fake.saveFileMetadataArgsForCall = append(fake.saveFileMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SaveFileMetadataStub
	fakeReturns := fake.saveFileMetadataReturns
	fake.recordInvocation("SaveFileMetadata", []interface{}{arg1, arg2, arg3, arg4})
	fake.saveFileMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CoreService) SaveFileMetadataCallCount() int {
	fake.saveFileMetadataMutex.RLock()
	defer fake.saveFileMetadataMutex.RUnlock()
	return len(fake.saveFileMetadataArgsForCall)
}

func (fake *CoreService) SaveFileMetadataCalls(stub func(context.Context, string, string, string) error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = stub
}

func (fake *CoreService) SaveFileMetadataArgsForCall(i int) (context.Context, string, string, string) {
	fake.saveFileMetadataMutex.RLock()
	defer fake.saveFileMetadataMutex.RUnlock()
	argsForCall := fake.saveFileMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CoreService) SaveFileMetadataReturns(result1 error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = nil
	fake.saveFileMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *CoreService) SaveFileMetadataReturnsOnCall(i int, result1 error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = nil
	if fake.saveFileMetadataReturnsOnCall == nil {
		fake.saveFileMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveFileMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CoreService) UploadUserFile(arg1 context.Context, arg2 string, arg3 io.Reader, arg4 int64) error {
	fake.uploadUserFileMutex.Lock()
	ret, specificReturn := fake.uploadUserFileReturnsOnCall[len(fake.uploadUserFileArgsForCall)]
	fake.uploadUserFileArgsForCall = append(fake.uploadUserFileArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 io.Reader
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.UploadUserFileStub
	fakeReturns := fake.uploadUserFileReturns
	fake.recordInvocation("UploadUserFile", []interface{}{arg1, arg2, arg3, arg4})
	fake.uploadUserFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CoreService) UploadUserFileCallCount() int {
	fake.uploadUserFileMutex.RLock()
	defer fake.uploadUserFileMutex.RUnlock()
	return len(fake.uploadUserFileArgsForCall)
}

func (fake *CoreService) UploadUserFileCalls(stub func(context.Context, string, io.Reader, int64) error) {
	fake.uploadUserFileMutex.Lock()
	defer fake.uploadUserFileMutex.Unlock()
	fake.UploadUserFileStub = stub
}

func (fake *CoreService) UploadUserFileArgsForCall(i int) (context.Context, string, io.Reader, int64) {
	fake.uploadUserFileMutex.RLock()
	defer fake.uploadUserFileMutex.RUnlock()
	argsForCall := fake.uploadUserFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CoreService) UploadUserFileReturns(result1 error) {
	fake.uploadUserFileMutex.Lock()
	defer fake.uploadUserFileMutex.Unlock()
	fake.UploadUserFileStub = nil
	fake.uploadUserFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *CoreService) UploadUserFileReturnsOnCall(i int, result1 error) {
	fake.uploadUserFileMutex.Lock()
	defer fake.uploadUserFileMutex.Unlock()
	fake.UploadUserFileStub = nil
	if fake.uploadUserFileReturnsOnCall == nil {
		fake.uploadUserFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadUserFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CoreService) ValidateToken(arg1 context.Context, arg2 string) (jwt.MapClaims, error) {
	fake.validateTokenMutex.Lock()
	ret, specificReturn := fake.validateTokenReturnsOnCall[len(fake.validateTokenArgsForCall)]
	fake.validateTokenArgsForCall = append(fake.validateTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ValidateTokenStub
	fakeReturns := fake.validateTokenReturns
	fake.recordInvocation("ValidateToken", []interface{}{arg1, arg2})
	fake.validateTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CoreService) ValidateTokenCallCount() int {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	return len(fake.validateTokenArgsForCall)
}

func (fake *CoreService) ValidateTokenCalls(stub func(context.Context, string) (jwt.MapClaims, error)) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = stub
}

func (fake *CoreService) ValidateTokenArgsForCall(i int) (context.Context, string) {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	argsForCall := fake.validateTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CoreService) ValidateTokenReturns(result1 jwt.MapClaims, result2 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	fake.validateTokenReturns = struct {
		result1 jwt.MapClaims
		result2 error
	}{result1, result2}
}

func (fake *CoreService) ValidateTokenReturnsOnCall(i int, result1 jwt.MapClaims, result2 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	if fake.validateTokenReturnsOnCall == nil {
		fake.validateTokenReturnsOnCall = make(map[int]struct {
			result1 jwt.MapClaims
			result2 error
		})
	}
	fake.validateTokenReturnsOnCall[i] = struct {
		result1 jwt.MapClaims
		result2 error
	}{result1, result2}
}

func (fake *CoreService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CoreService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.CoreService = new(CoreService)
