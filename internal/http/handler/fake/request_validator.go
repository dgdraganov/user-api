// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"net/http"
	"sync"

	"github.com/dgdraganov/user-api/internal/http/handler"
)

type RequestValidator struct {
	DecodeJSONPayloadStub        func(*http.Request, any) error
	decodeJSONPayloadMutex       sync.RWMutex
	decodeJSONPayloadArgsForCall []struct {
		arg1 *http.Request
		arg2 any
	}
	decodeJSONPayloadReturns struct {
		result1 error
	}
	decodeJSONPayloadReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RequestValidator) DecodeJSONPayload(arg1 *http.Request, arg2 any) error {
	fake.decodeJSONPayloadMutex.Lock()
	ret, specificReturn := fake.decodeJSONPayloadReturnsOnCall[len(fake.decodeJSONPayloadArgsForCall)]
	fake.decodeJSONPayloadArgsForCall = append(fake.decodeJSONPayloadArgsForCall, struct {
		arg1 *http.Request
		arg2 any
	}{arg1, arg2})
	stub := fake.DecodeJSONPayloadStub
	fakeReturns := fake.decodeJSONPayloadReturns
	fake.recordInvocation("DecodeJSONPayload", []interface{}{arg1, arg2})
	fake.decodeJSONPayloadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RequestValidator) DecodeJSONPayloadCallCount() int {
	fake.decodeJSONPayloadMutex.RLock()
	defer fake.decodeJSONPayloadMutex.RUnlock()
	return len(fake.decodeJSONPayloadArgsForCall)
}

func (fake *RequestValidator) DecodeJSONPayloadCalls(stub func(*http.Request, any) error) {
	fake.decodeJSONPayloadMutex.Lock()
	defer fake.decodeJSONPayloadMutex.Unlock()
	fake.DecodeJSONPayloadStub = stub
}

func (fake *RequestValidator) DecodeJSONPayloadArgsForCall(i int) (*http.Request, any) {
	fake.decodeJSONPayloadMutex.RLock()
	defer fake.decodeJSONPayloadMutex.RUnlock()
	argsForCall := fake.decodeJSONPayloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *RequestValidator) DecodeJSONPayloadReturns(result1 error) {
	fake.decodeJSONPayloadMutex.Lock()
	defer fake.decodeJSONPayloadMutex.Unlock()
	fake.DecodeJSONPayloadStub = nil
	fake.decodeJSONPayloadReturns = struct {
		result1 error
	}{result1}
}

func (fake *RequestValidator) DecodeJSONPayloadReturnsOnCall(i int, result1 error) {
	fake.decodeJSONPayloadMutex.Lock()
	defer fake.decodeJSONPayloadMutex.Unlock()
	fake.DecodeJSONPayloadStub = nil
	if fake.decodeJSONPayloadReturnsOnCall == nil {
		fake.decodeJSONPayloadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeJSONPayloadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RequestValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RequestValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.RequestValidator = new(RequestValidator)
