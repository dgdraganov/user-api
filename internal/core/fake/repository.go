// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/dgdraganov/user-api/internal/core"
	"github.com/dgdraganov/user-api/internal/repository"
)

type Repository struct {
	GetUserByEmailStub        func(context.Context, string, *repository.User) error
	getUserByEmailMutex       sync.RWMutex
	getUserByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *repository.User
	}
	getUserByEmailReturns struct {
		result1 error
	}
	getUserByEmailReturnsOnCall map[int]struct {
		result1 error
	}
	ListUsersByPageStub        func(context.Context, int, int, *[]repository.User) error
	listUsersByPageMutex       sync.RWMutex
	listUsersByPageArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 *[]repository.User
	}
	listUsersByPageReturns struct {
		result1 error
	}
	listUsersByPageReturnsOnCall map[int]struct {
		result1 error
	}
	SaveFileMetadataStub        func(context.Context, repository.FileMetadata) error
	saveFileMetadataMutex       sync.RWMutex
	saveFileMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 repository.FileMetadata
	}
	saveFileMetadataReturns struct {
		result1 error
	}
	saveFileMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Repository) GetUserByEmail(arg1 context.Context, arg2 string, arg3 *repository.User) error {
	fake.getUserByEmailMutex.Lock()
	ret, specificReturn := fake.getUserByEmailReturnsOnCall[len(fake.getUserByEmailArgsForCall)]
	fake.getUserByEmailArgsForCall = append(fake.getUserByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *repository.User
	}{arg1, arg2, arg3})
	stub := fake.GetUserByEmailStub
	fakeReturns := fake.getUserByEmailReturns
	fake.recordInvocation("GetUserByEmail", []interface{}{arg1, arg2, arg3})
	fake.getUserByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Repository) GetUserByEmailCallCount() int {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return len(fake.getUserByEmailArgsForCall)
}

func (fake *Repository) GetUserByEmailCalls(stub func(context.Context, string, *repository.User) error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = stub
}

func (fake *Repository) GetUserByEmailArgsForCall(i int) (context.Context, string, *repository.User) {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	argsForCall := fake.getUserByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Repository) GetUserByEmailReturns(result1 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	fake.getUserByEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *Repository) GetUserByEmailReturnsOnCall(i int, result1 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	if fake.getUserByEmailReturnsOnCall == nil {
		fake.getUserByEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getUserByEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Repository) ListUsersByPage(arg1 context.Context, arg2 int, arg3 int, arg4 *[]repository.User) error {
	fake.listUsersByPageMutex.Lock()
	ret, specificReturn := fake.listUsersByPageReturnsOnCall[len(fake.listUsersByPageArgsForCall)]
	fake.listUsersByPageArgsForCall = append(fake.listUsersByPageArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 *[]repository.User
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListUsersByPageStub
	fakeReturns := fake.listUsersByPageReturns
	fake.recordInvocation("ListUsersByPage", []interface{}{arg1, arg2, arg3, arg4})
	fake.listUsersByPageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Repository) ListUsersByPageCallCount() int {
	fake.listUsersByPageMutex.RLock()
	defer fake.listUsersByPageMutex.RUnlock()
	return len(fake.listUsersByPageArgsForCall)
}

func (fake *Repository) ListUsersByPageCalls(stub func(context.Context, int, int, *[]repository.User) error) {
	fake.listUsersByPageMutex.Lock()
	defer fake.listUsersByPageMutex.Unlock()
	fake.ListUsersByPageStub = stub
}

func (fake *Repository) ListUsersByPageArgsForCall(i int) (context.Context, int, int, *[]repository.User) {
	fake.listUsersByPageMutex.RLock()
	defer fake.listUsersByPageMutex.RUnlock()
	argsForCall := fake.listUsersByPageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Repository) ListUsersByPageReturns(result1 error) {
	fake.listUsersByPageMutex.Lock()
	defer fake.listUsersByPageMutex.Unlock()
	fake.ListUsersByPageStub = nil
	fake.listUsersByPageReturns = struct {
		result1 error
	}{result1}
}

func (fake *Repository) ListUsersByPageReturnsOnCall(i int, result1 error) {
	fake.listUsersByPageMutex.Lock()
	defer fake.listUsersByPageMutex.Unlock()
	fake.ListUsersByPageStub = nil
	if fake.listUsersByPageReturnsOnCall == nil {
		fake.listUsersByPageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listUsersByPageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Repository) SaveFileMetadata(arg1 context.Context, arg2 repository.FileMetadata) error {
	fake.saveFileMetadataMutex.Lock()
	ret, specificReturn := fake.saveFileMetadataReturnsOnCall[len(fake.saveFileMetadataArgsForCall)]
	fake.saveFileMetadataArgsForCall = append(fake.saveFileMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 repository.FileMetadata
	}{arg1, arg2})
	stub := fake.SaveFileMetadataStub
	fakeReturns := fake.saveFileMetadataReturns
	fake.recordInvocation("SaveFileMetadata", []interface{}{arg1, arg2})
	fake.saveFileMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Repository) SaveFileMetadataCallCount() int {
	fake.saveFileMetadataMutex.RLock()
	defer fake.saveFileMetadataMutex.RUnlock()
	return len(fake.saveFileMetadataArgsForCall)
}

func (fake *Repository) SaveFileMetadataCalls(stub func(context.Context, repository.FileMetadata) error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = stub
}

func (fake *Repository) SaveFileMetadataArgsForCall(i int) (context.Context, repository.FileMetadata) {
	fake.saveFileMetadataMutex.RLock()
	defer fake.saveFileMetadataMutex.RUnlock()
	argsForCall := fake.saveFileMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Repository) SaveFileMetadataReturns(result1 error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = nil
	fake.saveFileMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *Repository) SaveFileMetadataReturnsOnCall(i int, result1 error) {
	fake.saveFileMetadataMutex.Lock()
	defer fake.saveFileMetadataMutex.Unlock()
	fake.SaveFileMetadataStub = nil
	if fake.saveFileMetadataReturnsOnCall == nil {
		fake.saveFileMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveFileMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Repository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Repository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Repository = new(Repository)
