// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/dgdraganov/user-api/internal/core"
	"github.com/dgdraganov/user-api/internal/repository"
)

type Repository struct {
	GetUserFromDBStub        func(context.Context, string) (*repository.User, error)
	getUserFromDBMutex       sync.RWMutex
	getUserFromDBArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserFromDBReturns struct {
		result1 *repository.User
		result2 error
	}
	getUserFromDBReturnsOnCall map[int]struct {
		result1 *repository.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Repository) GetUserFromDB(arg1 context.Context, arg2 string) (*repository.User, error) {
	fake.getUserFromDBMutex.Lock()
	ret, specificReturn := fake.getUserFromDBReturnsOnCall[len(fake.getUserFromDBArgsForCall)]
	fake.getUserFromDBArgsForCall = append(fake.getUserFromDBArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserFromDBStub
	fakeReturns := fake.getUserFromDBReturns
	fake.recordInvocation("GetUserFromDB", []interface{}{arg1, arg2})
	fake.getUserFromDBMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Repository) GetUserFromDBCallCount() int {
	fake.getUserFromDBMutex.RLock()
	defer fake.getUserFromDBMutex.RUnlock()
	return len(fake.getUserFromDBArgsForCall)
}

func (fake *Repository) GetUserFromDBCalls(stub func(context.Context, string) (*repository.User, error)) {
	fake.getUserFromDBMutex.Lock()
	defer fake.getUserFromDBMutex.Unlock()
	fake.GetUserFromDBStub = stub
}

func (fake *Repository) GetUserFromDBArgsForCall(i int) (context.Context, string) {
	fake.getUserFromDBMutex.RLock()
	defer fake.getUserFromDBMutex.RUnlock()
	argsForCall := fake.getUserFromDBArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Repository) GetUserFromDBReturns(result1 *repository.User, result2 error) {
	fake.getUserFromDBMutex.Lock()
	defer fake.getUserFromDBMutex.Unlock()
	fake.GetUserFromDBStub = nil
	fake.getUserFromDBReturns = struct {
		result1 *repository.User
		result2 error
	}{result1, result2}
}

func (fake *Repository) GetUserFromDBReturnsOnCall(i int, result1 *repository.User, result2 error) {
	fake.getUserFromDBMutex.Lock()
	defer fake.getUserFromDBMutex.Unlock()
	fake.GetUserFromDBStub = nil
	if fake.getUserFromDBReturnsOnCall == nil {
		fake.getUserFromDBReturnsOnCall = make(map[int]struct {
			result1 *repository.User
			result2 error
		})
	}
	fake.getUserFromDBReturnsOnCall[i] = struct {
		result1 *repository.User
		result2 error
	}{result1, result2}
}

func (fake *Repository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Repository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Repository = new(Repository)
