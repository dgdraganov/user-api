// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/dgdraganov/user-api/internal/core"
	jwta "github.com/dgdraganov/user-api/pkg/jwt"
	"github.com/golang-jwt/jwt"
)

type JWTIssuer struct {
	GenerateStub        func(jwta.TokenInfo) *jwt.Token
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		arg1 jwta.TokenInfo
	}
	generateReturns struct {
		result1 *jwt.Token
	}
	generateReturnsOnCall map[int]struct {
		result1 *jwt.Token
	}
	SignStub        func(*jwt.Token) (string, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 *jwt.Token
	}
	signReturns struct {
		result1 string
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ValidateStub        func(string) (jwt.MapClaims, error)
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 string
	}
	validateReturns struct {
		result1 jwt.MapClaims
		result2 error
	}
	validateReturnsOnCall map[int]struct {
		result1 jwt.MapClaims
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *JWTIssuer) Generate(arg1 jwta.TokenInfo) *jwt.Token {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		arg1 jwta.TokenInfo
	}{arg1})
	stub := fake.GenerateStub
	fakeReturns := fake.generateReturns
	fake.recordInvocation("Generate", []interface{}{arg1})
	fake.generateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *JWTIssuer) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *JWTIssuer) GenerateCalls(stub func(jwta.TokenInfo) *jwt.Token) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = stub
}

func (fake *JWTIssuer) GenerateArgsForCall(i int) jwta.TokenInfo {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	argsForCall := fake.generateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *JWTIssuer) GenerateReturns(result1 *jwt.Token) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 *jwt.Token
	}{result1}
}

func (fake *JWTIssuer) GenerateReturnsOnCall(i int, result1 *jwt.Token) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 *jwt.Token
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 *jwt.Token
	}{result1}
}

func (fake *JWTIssuer) Sign(arg1 *jwt.Token) (string, error) {
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 *jwt.Token
	}{arg1})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *JWTIssuer) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *JWTIssuer) SignCalls(stub func(*jwt.Token) (string, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *JWTIssuer) SignArgsForCall(i int) *jwt.Token {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1
}

func (fake *JWTIssuer) SignReturns(result1 string, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *JWTIssuer) SignReturnsOnCall(i int, result1 string, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *JWTIssuer) Validate(arg1 string) (jwt.MapClaims, error) {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *JWTIssuer) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *JWTIssuer) ValidateCalls(stub func(string) (jwt.MapClaims, error)) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *JWTIssuer) ValidateArgsForCall(i int) string {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *JWTIssuer) ValidateReturns(result1 jwt.MapClaims, result2 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 jwt.MapClaims
		result2 error
	}{result1, result2}
}

func (fake *JWTIssuer) ValidateReturnsOnCall(i int, result1 jwt.MapClaims, result2 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 jwt.MapClaims
			result2 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 jwt.MapClaims
		result2 error
	}{result1, result2}
}

func (fake *JWTIssuer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *JWTIssuer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.JWTIssuer = new(JWTIssuer)
